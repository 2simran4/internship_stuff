import React, { useEffect, useRef } from 'react';
import { createChart } from 'lightweight-charts';

const ChartComponent = () => {
  const candlestickChartRef = useRef();
  const rsiChartRef = useRef();

  const candlestickData = [
    { time: '2021-06-30', open: 100, high: 110, low: 90, close: 105 },
    { time: '2021-07-01', open: 105, high: 115, low: 95, close: 110 },
    { time: '2021-07-02', open: 110, high: 120, low: 100, close: 115 },
    { time: '2021-07-03', open: 115, high: 125, low: 105, close: 120 },
    { time: '2021-07-04', open: 120, high: 130, low: 110, close: 125 },
  ];

  const rsiData = [
    { time: '2021-06-30', value: 30 },
    { time: '2021-07-01', value: 35 },
    { time: '2021-07-02', value: 40 },
    { time: '2021-07-03', value: 45 },
    { time: '2021-07-04', value: 50 },
  ];

  useEffect(() => {
    const candlestickChart = createChart(candlestickChartRef.current, {
      width: candlestickChartRef.current.clientWidth,
      height: 300,
      layout: {
        backgroundColor: '#ffffff',
        textColor: '#000000',
      },
      timeScale: {
        timeVisible: true,
        secondsVisible: false,
      },
    });

    const rsiChart = createChart(rsiChartRef.current, {
      width: rsiChartRef.current.clientWidth,
      height: 200,
      layout: {
        backgroundColor: '#ffffff',
        textColor: '#000000',
      },
      timeScale: {
        timeVisible: true,
        secondsVisible: false,
      },
    });

    const candlestickSeries = candlestickChart.addCandlestickSeries();
    candlestickSeries.setData(candlestickData);

    const rsiSeries = rsiChart.addLineSeries({ color: 'purple' });
    rsiSeries.setData(rsiData);

    const synchronizeCrosshair = (event, sourceChart, targetChart) => {
      const crosshair = event ? { time: event.time } : null;
      targetChart.applyOptions({
        crosshair: {
          vertLine: { visible: !!crosshair },
          horzLine: { visible: !!crosshair },
        },
      });
      targetChart.setCrosshair(crosshair);
    };

    candlestickChart.subscribeCrosshairMove((event) => {
      synchronizeCrosshair(event, candlestickChart, rsiChart);
    });

    rsiChart.subscribeCrosshairMove((event) => {
      synchronizeCrosshair(event, rsiChart, candlestickChart);
    });

    const resizeObserver = new ResizeObserver((entries) => {
      for (let entry of entries) {
        if (entry.target === candlestickChartRef.current) {
          candlestickChart.resize(entry.contentRect.width, entry.contentRect.height);
        } else if (entry.target === rsiChartRef.current) {
          rsiChart.resize(entry.contentRect.width, entry.contentRect.height);
        }
      }
    });

    resizeObserver.observe(candlestickChartRef.current);
    resizeObserver.observe(rsiChartRef.current);

    return () => {
      resizeObserver.disconnect();
      candlestickChart.remove();
      rsiChart.remove();
    };
  }, []);

  return (
    <div>
      <div ref={candlestickChartRef} style={{ width: '100%', height: '300px' }}></div>
      <div ref={rsiChartRef} style={{ width: '100%', height: '200px' }}></div>
    </div>
  );
};

export default ChartComponent;
