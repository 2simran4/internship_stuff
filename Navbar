import React, { useEffect, useRef } from 'react';
import { createChart } from 'lightweight-charts';

const ChartComponent = () => {
  const candlestickChartRef = useRef();
  const rsiChartRef = useRef();

  const getCandlestickData = () => {
    return [
      { time: '2023-06-01', open: 100, high: 110, low: 90, close: 105 },
      { time: '2023-06-02', open: 105, high: 115, low: 95, close: 110 },
      // Add more data points as needed
    ];
  };

  const getRSIData = () => {
    return [
      { time: '2023-06-01', value: 30 },
      { time: '2023-06-02', value: 35 },
      // Add more data points as needed
    ];
  };

  useEffect(() => {
    const candlestickChart = createChart(candlestickChartRef.current, {
      width: candlestickChartRef.current.clientWidth,
      height: 300,
      layout: {
        backgroundColor: '#ffffff',
        textColor: '#000000',
      },
      timeScale: {
        timeVisible: true,
        secondsVisible: false,
      },
    });

    const rsiChart = createChart(rsiChartRef.current, {
      width: rsiChartRef.current.clientWidth,
      height: 200,
      layout: {
        backgroundColor: '#ffffff',
        textColor: '#000000',
      },
      timeScale: {
        timeVisible: true,
        secondsVisible: false,
      },
    });

    const candlestickSeries = candlestickChart.addCandlestickSeries();
    candlestickSeries.setData(getCandlestickData());

    const rsiSeries = rsiChart.addLineSeries({ color: 'purple' });
    rsiSeries.setData(getRSIData());

    // Synchronize crosshair movement
    const syncCrosshair = (e) => {
      if (!e || !e.time) return;
      const crosshairTime = e.time;

      const crosshairCandlestick = {
        time: crosshairTime,
        seriesData: [{ series: candlestickSeries }],
      };
      const crosshairRSI = {
        time: crosshairTime,
        seriesData: [{ series: rsiSeries }],
      };

      candlestickChart.subscribeCrosshairMove((param) => {
        if (param.time !== crosshairTime) {
          rsiChart.moveCrosshair(crosshairRSI);
        }
      });

      rsiChart.subscribeCrosshairMove((param) => {
        if (param.time !== crosshairTime) {
          candlestickChart.moveCrosshair(crosshairCandlestick);
        }
      });
    };

    candlestickChart.subscribeCrosshairMove(syncCrosshair);
    rsiChart.subscribeCrosshairMove(syncCrosshair);

    const resizeObserver = new ResizeObserver((entries) => {
      for (let entry of entries) {
        if (entry.target === candlestickChartRef.current) {
          candlestickChart.resize(entry.contentRect.width, entry.contentRect.height);
        } else if (entry.target === rsiChartRef.current) {
          rsiChart.resize(entry.contentRect.width, entry.contentRect.height);
        }
      }
    });

    resizeObserver.observe(candlestickChartRef.current);
    resizeObserver.observe(rsiChartRef.current);

    return () => {
      resizeObserver.disconnect();
    };
  }, []);

  return (
    <div>
      <div ref={candlestickChartRef} style={{ width: '100%', height: '300px' }}></div>
      <div ref={rsiChartRef} style={{ width: '100%', height: '200px' }}></div>
    </div>
  );
};

export default ChartComponent;
