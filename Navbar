/* src/Navbar.css */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
}

.navbar {
  background: #333;
  height: 60px;
  display: flex;
  justify-content: center;
  align-items: center;
  position: sticky;
  top: 0;
  z-index: 999;
  width: 100%;
}

.nav-container {
  display: flex;
  justify-content: space-between;
  height: 60px;
  width: 100%;
  max-width: 1300px;
}

.nav-logo {
  color: #fff;
  justify-self: start;
  margin-left: 20px;
  cursor: pointer;
  text-decoration: none;
  font-size: 24px;
}

.nav-menu {
  display: flex;
  align-items: center;
  list-style: none;
  text-align: center;
}

.nav-item {
  height: 60px;
}

.nav-links {
  color: #fff;
  display: flex;
  align-items: center;
  text-decoration: none;
  padding: 0 20px;
  height: 100%;
  cursor: pointer;
}

.nav-links:hover {
  background-color: #575757;
  border-radius: 4px;
}

.nav-icon {
  display: none;
}

.nav-search {
  display: flex;
  align-items: center;
}

.nav-search-input {
  padding: 5px;
  border: none;
  border-radius: 4px;
}

.nav-search-button {
  background: none;
  border: none;
  color: #fff;
  cursor: pointer;
  margin-left: 5px;
}

/* Responsive styling */
@media screen and (max-width: 960px) {
  .nav-icon {
    display: block;
    position: absolute;
    top: 18px;
    right: 20px;
    cursor: pointer;
    color: #fff;
  }

  .nav-menu {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: calc(100vh - 60px);
    position: absolute;
    top: 60px;
    left: -100%;
    opacity: 1;
    transition: all 0.5s ease;
    background: #333;
  }

  .nav-menu.active {
    background: #333;
    left: 0;
    opacity: 1;
    transition: all 0.5s ease;
    z-index: 1;
  }

  .nav-item {
    width: 100%;
  }

  .nav-links {
    padding: 2rem;
    width: 100%;
    display: table;
  }

  .nav-search {
    padding: 2rem;
  }
}
// src/Navbar.js
import React, { useState } from 'react';
import { FaBars, FaTimes, FaSearch } from 'react-icons/fa';
import './Navbar.css';

const Navbar = () => {
  const [click, setClick] = useState(false);

  const handleClick = () => setClick(!click);

  return (
    <nav className="navbar">
      <div className="nav-container">
        <a href="#" className="nav-logo">
          Logo
        </a>
        <div className="nav-icon" onClick={handleClick}>
          {click ? <FaTimes /> : <FaBars />}
        </div>
        <ul className={click ? 'nav-menu active' : 'nav-menu'}>
          <li className="nav-item">
            <a href="#" className="nav-links">
              Home
            </a>
          </li>
          <li className="nav-item">
            <a href="#" className="nav-links">
              About
            </a>
          </li>
          <li className="nav-item">
            <a href="#" className="nav-links">
              Services
            </a>
          </li>
          <li className="nav-item">
            <a href="#" className="nav-links">
              Contact
            </a>
          </li>
          <li className="nav-item">
            <div className="nav-search">
              <input type="text" className="nav-search-input" placeholder="Search..." />
              <button className="nav-search-button">
                <FaSearch />
              </button>
            </div>
          </li>
        </ul>
      </div>
    </nav>
  );
};

export default Navbar;

import React, { useEffect, useRef, useState } from 'react';
import { createChart } from 'lightweight-charts';

const ChartComponent = () => {
  const candlestickChartRef = useRef();
  const rsiChartRef = useRef();
  const [crosshairPosition, setCrosshairPosition] = useState(null);

  const getData = async () => {
    // Your data fetching logic here
  };

  useEffect(() => {
    const createSeparateChart = (containerRef, seriesType, seriesOptions, dataMapper) => {
      const chart = createChart(containerRef.current, {
        // Chart configuration options
      });

      const series = chart[seriesType](seriesOptions);

      const fetchAndRenderData = async () => {
        const data = await getData();
        const formattedData = data.map(dataMapper);
        series.setData(formattedData);
      };

      fetchAndRenderData();

      // Resize observer and other setup...

      return { chart, series };
    };

    const candlestickChart = createSeparateChart(
      candlestickChartRef,
      'addCandlestickSeries',
      {},
      d => ({
        // Candlestick series data mapping
      })
    );

    const rsiChart = createSeparateChart(
      rsiChartRef,
      'addLineSeries',
      { color: 'purple', lineWidth: 1 },
      d => ({
        // RSI series data mapping
      })
    );

    const synchronizeCrosshair = () => {
      const onMouseMove = (e) => {
        const candlestickChartInstance = candlestickChart.chart;
        const rsiChartInstance = rsiChart.chart;

        const { offsetX, offsetY } = e.nativeEvent;
        const { left, top, width, height } = candlestickChartInstance._element.getBoundingClientRect();

        if (offsetX >= left && offsetX <= left + width && offsetY >= top && offsetY <= top + height) {
          // Mouse is inside candlestick chart
          const time = candlestickChartInstance.timeScale().coordinateToTime(offsetX - left);
          setCrosshairPosition({ time, chart: 'candlestick' });
          rsiChartInstance.removeSeries('crosshairLine');
        } else {
          // Mouse is inside RSI chart
          const time = rsiChartInstance.timeScale().coordinateToTime(offsetX - left);
          setCrosshairPosition({ time, chart: 'rsi' });
          candlestickChartInstance.removeSeries('crosshairLine');
        }
      };

      const onMouseLeave = () => {
        setCrosshairPosition(null);
        candlestickChart.chart.removeSeries('crosshairLine');
        rsiChart.chart.removeSeries('crosshairLine');
      };

      candlestickChartRef.current.addEventListener('mousemove', onMouseMove);
      rsiChartRef.current.addEventListener('mousemove', onMouseMove);
      candlestickChartRef.current.addEventListener('mouseleave', onMouseLeave);
      rsiChartRef.current.addEventListener('mouseleave', onMouseLeave);

      return () => {
        candlestickChartRef.current.removeEventListener('mousemove', onMouseMove);
        rsiChartRef.current.removeEventListener('mousemove', onMouseMove);
        candlestickChartRef.current.removeEventListener('mouseleave', onMouseLeave);
        rsiChartRef.current.removeEventListener('mouseleave', onMouseLeave);
      };
    };

    synchronizeCrosshair();

    return () => {
      candlestickChart.chart.remove();
      rsiChart.chart.remove();
    };
  }, []);

  useEffect(() => {
    if (!crosshairPosition) return;

    const candlestickChartInstance = candlestickChartRef.current.chart;
    const rsiChartInstance = rsiChartRef.current.chart;

    if (crosshairPosition.chart === 'candlestick') {
      const candlestickSeries = candlestickChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      candlestickSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    } else {
      const rsiSeries = rsiChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      rsiSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    }

    return () => {
      candlestickChartInstance.removeSeries('crosshairLine');
      rsiChartInstance.removeSeries('crosshairLine');
    };
  }, [crosshairPosition]);

  return (
    <div>
      <div ref={candlestickChartRef} style={{ width: '100vw', height: '50vh' }} />
      <div ref={rsiChartRef} style={{ width: '100vw', height: '50vh' }} />
    </div>
  );
};

export default ChartComponent;
import React, { useEffect, useRef, useState } from 'react';
import { createChart } from 'lightweight-charts';

const ChartComponent = () => {
  const candlestickChartRef = useRef();
  const rsiChartRef = useRef();
  const [crosshairPosition, setCrosshairPosition] = useState(null);

  const getData = async () => {
    // Your data fetching logic here
  };

  useEffect(() => {
    const createSeparateChart = (containerRef, seriesType, seriesOptions, dataMapper) => {
      const chart = createChart(containerRef.current, {
        // Chart configuration options
      });

      const series = chart[seriesType](seriesOptions);

      const fetchAndRenderData = async () => {
        const data = await getData();
        const formattedData = data.map(dataMapper);
        series.setData(formattedData);
      };

      fetchAndRenderData();

      // Resize observer and other setup...

      return { chart, series };
    };

    const candlestickChart = createSeparateChart(
      candlestickChartRef,
      'addCandlestickSeries',
      {},
      d => ({
        // Candlestick series data mapping
      })
    );

    const rsiChart = createSeparateChart(
      rsiChartRef,
      'addLineSeries',
      { color: 'purple', lineWidth: 1 },
      d => ({
        // RSI series data mapping
      })
    );

    const synchronizeCrosshair = () => {
      const onMouseMove = (e) => {
        const candlestickChartInstance = candlestickChartRef.current?.chart;
        const rsiChartInstance = rsiChartRef.current?.chart;

        if (!candlestickChartInstance || !rsiChartInstance) return;

        const { offsetX, offsetY } = e.nativeEvent;
        const { left, top, width, height } = candlestickChartInstance._element.getBoundingClientRect();

        if (offsetX >= left && offsetX <= left + width && offsetY >= top && offsetY <= top + height) {
          // Mouse is inside candlestick chart
          const time = candlestickChartInstance.timeScale().coordinateToTime(offsetX - left);
          setCrosshairPosition({ time, chart: 'candlestick' });
          rsiChartInstance.removeSeries('crosshairLine');
        } else {
          // Mouse is inside RSI chart
          const time = rsiChartInstance.timeScale().coordinateToTime(offsetX - left);
          setCrosshairPosition({ time, chart: 'rsi' });
          candlestickChartInstance.removeSeries('crosshairLine');
        }
      };

      const onMouseLeave = () => {
        setCrosshairPosition(null);
        candlestickChartRef.current?.chart?.removeSeries('crosshairLine');
        rsiChartRef.current?.chart?.removeSeries('crosshairLine');
      };

      candlestickChartRef.current?.addEventListener('mousemove', onMouseMove);
      rsiChartRef.current?.addEventListener('mousemove', onMouseMove);
      candlestickChartRef.current?.addEventListener('mouseleave', onMouseLeave);
      rsiChartRef.current?.addEventListener('mouseleave', onMouseLeave);

      return () => {
        candlestickChartRef.current?.removeEventListener('mousemove', onMouseMove);
        rsiChartRef.current?.removeEventListener('mousemove', onMouseMove);
        candlestickChartRef.current?.removeEventListener('mouseleave', onMouseLeave);
        rsiChartRef.current?.removeEventListener('mouseleave', onMouseLeave);
      };
    };

    synchronizeCrosshair();

    return () => {
      candlestickChart.chart.remove();
      rsiChart.chart.remove();
    };
  }, []);

  useEffect(() => {
    if (!crosshairPosition) return;

    const candlestickChartInstance = candlestickChartRef.current?.chart;
    const rsiChartInstance = rsiChartRef.current?.chart;

    if (!candlestickChartInstance || !rsiChartInstance) return;

    if (crosshairPosition.chart === 'candlestick') {
      const candlestickSeries = candlestickChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      candlestickSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    } else {
      const rsiSeries = rsiChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      rsiSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    }

    return () => {
      candlestickChartInstance.removeSeries('crosshairLine');
      rsiChartInstance.removeSeries('crosshairLine');
    };
  }, [crosshairPosition]);

  return (
    <div>
      <div ref={candlestickChartRef} style={{ width: '100vw', height: '50vh' }} />
      <div ref={rsiChartRef} style={{ width: '100vw', height: '50vh' }} />
    </div>
  );
};

export default ChartComponent;
import React, { useEffect, useRef, useState } from 'react';
import { createChart } from 'lightweight-charts';

const ChartComponent = () => {
  const candlestickChartRef = useRef();
  const rsiChartRef = useRef();
  const [crosshairPosition, setCrosshairPosition] = useState(null);

  const getData = async () => {
    // Your data fetching logic here
  };

  useEffect(() => {
    const createSeparateChart = (containerRef, seriesType, seriesOptions, dataMapper) => {
      const chart = createChart(containerRef.current, {
        // Chart configuration options
      });

      const series = chart[seriesType](seriesOptions);

      const fetchAndRenderData = async () => {
        const data = await getData();
        const formattedData = data.map(dataMapper);
        series.setData(formattedData);
      };

      fetchAndRenderData();

      // Resize observer and other setup...

      return { chart, series };
    };

    const candlestickChart = createSeparateChart(
      candlestickChartRef,
      'addCandlestickSeries',
      {},
      d => ({
        // Candlestick series data mapping
      })
    );

    const rsiChart = createSeparateChart(
      rsiChartRef,
      'addLineSeries',
      { color: 'purple', lineWidth: 1 },
      d => ({
        // RSI series data mapping
      })
    );

    const synchronizeCrosshair = () => {
      const onMouseMove = (e) => {
        const candlestickChartInstance = candlestickChartRef.current?.chart;
        const rsiChartInstance = rsiChartRef.current?.chart;

        if (!candlestickChartInstance || !rsiChartInstance) return;

        const { offsetX, offsetY } = e.nativeEvent;
        const { left, top, width, height } = candlestickChartInstance._element.getBoundingClientRect();

        if (offsetX >= left && offsetX <= left + width && offsetY >= top && offsetY <= top + height) {
          // Mouse is inside candlestick chart
          const time = candlestickChartInstance.timeScale().coordinateToTime(offsetX - left);
          setCrosshairPosition({ time, chart: 'candlestick' });
          rsiChartInstance.removeSeries('crosshairLine');
        } else {
          // Mouse is inside RSI chart
          const time = rsiChartInstance.timeScale().coordinateToTime(offsetX - left);
          setCrosshairPosition({ time, chart: 'rsi' });
          candlestickChartInstance.removeSeries('crosshairLine');
        }
      };

      const onMouseLeave = () => {
        setCrosshairPosition(null);
        candlestickChartRef.current?.chart?.removeSeries('crosshairLine');
        rsiChartRef.current?.chart?.removeSeries('crosshairLine');
      };

      candlestickChartRef.current?.addEventListener('mousemove', onMouseMove);
      rsiChartRef.current?.addEventListener('mousemove', onMouseMove);
      candlestickChartRef.current?.addEventListener('mouseleave', onMouseLeave);
      rsiChartRef.current?.addEventListener('mouseleave', onMouseLeave);

      return () => {
        candlestickChartRef.current?.removeEventListener('mousemove', onMouseMove);
        rsiChartRef.current?.removeEventListener('mousemove', onMouseMove);
        candlestickChartRef.current?.removeEventListener('mouseleave', onMouseLeave);
        rsiChartRef.current?.removeEventListener('mouseleave', onMouseLeave);
      };
    };

    synchronizeCrosshair();

    return () => {
      candlestickChart.chart.remove();
      rsiChart.chart.remove();
    };
  }, []);

  useEffect(() => {
    if (!crosshairPosition) return;

    const candlestickChartInstance = candlestickChartRef.current?.chart;
    const rsiChartInstance = rsiChartRef.current?.chart;

    if (!candlestickChartInstance || !rsiChartInstance) return;

    if (crosshairPosition.chart === 'candlestick') {
      const candlestickSeries = candlestickChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      candlestickSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    } else {
      const rsiSeries = rsiChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      rsiSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    }

    return () => {
      candlestickChartInstance.removeSeries('crosshairLine');
      rsiChartInstance.removeSeries('crosshairLine');
    };
  }, [crosshairPosition]);

  return (
    <div>
      <div ref={candlestickChartRef} style={{ width: '100vw', height: '50vh' }} />
      <div ref={rsiChartRef} style={{ width: '100vw', height: '50vh' }} />
    </div>
  );
};

export default ChartComponent;
import React, { useEffect, useRef, useState } from 'react';
import { createChart } from 'lightweight-charts';

const ChartComponent = () => {
  const candlestickChartRef = useRef();
  const rsiChartRef = useRef();
  const [crosshairPosition, setCrosshairPosition] = useState(null);

  // Dummy data for candlestick chart
  const getCandlestickData = async () => {
    return [
      { timestamp: 1625097600, open: 150.50, high: 155.75, low: 149.20, close: 154.30 },
      { timestamp: 1625184000, open: 154.40, high: 158.00, low: 153.00, close: 157.60 },
      // Add more data points as needed
    ];
  };

  // Dummy data for RSI chart
  const getRSIData = async () => {
    return [
      { timestamp: 1625097600, rsi: 30 },
      { timestamp: 1625184000, rsi: 32 },
      // Add more data points as needed
    ];
  };

  useEffect(() => {
    const createSeparateChart = (containerRef, seriesType, seriesOptions, dataMapper) => {
      const chart = createChart(containerRef.current, {
        // Chart configuration options
      });

      const series = chart[seriesType](seriesOptions);

      const fetchAndRenderData = async () => {
        const data = seriesType === 'addCandlestickSeries' ? await getCandlestickData() : await getRSIData();
        const formattedData = data.map(dataMapper);
        series.setData(formattedData);
      };

      fetchAndRenderData();

      // Resize observer and other setup...

      return { chart, series };
    };

    const candlestickChart = createSeparateChart(
      candlestickChartRef,
      'addCandlestickSeries',
      {},
      d => ({
        time: d.timestamp,
        open: d.open,
        high: d.high,
        low: d.low,
        close: d.close,
      })
    );

    const rsiChart = createSeparateChart(
      rsiChartRef,
      'addLineSeries',
      { color: 'purple', lineWidth: 1 },
      d => ({
        time: d.timestamp,
        value: d.rsi,
      })
    );

    const synchronizeCrosshair = () => {
      const onMouseMove = (e) => {
        const candlestickChartInstance = candlestickChartRef.current?.chart;
        const rsiChartInstance = rsiChartRef.current?.chart;

        if (!candlestickChartInstance || !rsiChartInstance) return;

        const { offsetX, offsetY } = e.nativeEvent;
        const { left, top, width, height } = candlestickChartInstance._element.getBoundingClientRect();

        if (offsetX >= left && offsetX <= left + width && offsetY >= top && offsetY <= top + height) {
          // Mouse is inside candlestick chart
          const time = candlestickChartInstance.timeScale().coordinateToTime(offsetX - left);
          setCrosshairPosition({ time, chart: 'candlestick' });
          rsiChartInstance.removeSeries('crosshairLine');
        } else {
          // Mouse is inside RSI chart
          const time = rsiChartInstance.timeScale().coordinateToTime(offsetX - left);
          setCrosshairPosition({ time, chart: 'rsi' });
          candlestickChartInstance.removeSeries('crosshairLine');
        }
      };

      const onMouseLeave = () => {
        setCrosshairPosition(null);
        candlestickChartRef.current?.chart?.removeSeries('crosshairLine');
        rsiChartRef.current?.chart?.removeSeries('crosshairLine');
      };

      candlestickChartRef.current?.addEventListener('mousemove', onMouseMove);
      rsiChartRef.current?.addEventListener('mousemove', onMouseMove);
      candlestickChartRef.current?.addEventListener('mouseleave', onMouseLeave);
      rsiChartRef.current?.addEventListener('mouseleave', onMouseLeave);

      return () => {
        candlestickChartRef.current?.removeEventListener('mousemove', onMouseMove);
        rsiChartRef.current?.removeEventListener('mousemove', onMouseMove);
        candlestickChartRef.current?.removeEventListener('mouseleave', onMouseLeave);
        rsiChartRef.current?.removeEventListener('mouseleave', onMouseLeave);
      };
    };

    synchronizeCrosshair();

    return () => {
      candlestickChart.chart.remove();
      rsiChart.chart.remove();
    };
  }, []);

  useEffect(() => {
    if (!crosshairPosition) return;

    const candlestickChartInstance = candlestickChartRef.current?.chart;
    const rsiChartInstance = rsiChartRef.current?.chart;

    if (!candlestickChartInstance || !rsiChartInstance) return;

    if (crosshairPosition.chart === 'candlestick') {
      const candlestickSeries = candlestickChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      candlestickSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    } else {
      const rsiSeries = rsiChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      rsiSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    }

    return () => {
      candlestickChartInstance.removeSeries('crosshairLine');
      rsiChartInstance.removeSeries('crosshairLine');
    };
  }, [crosshairPosition]);

  return (
    <div>
      <div ref={candlestickChartRef} style={{ width: '100vw', height: '50vh' }} />
      <div ref={rsiChartRef} style={{ width: '100vw', height: '50vh' }} />
    </div>
  );
};
import React, { useEffect, useRef, useState } from 'react';
import { createChart } from 'lightweight-charts';

const ChartComponent = () => {
  const candlestickChartRef = useRef();
  const rsiChartRef = useRef();
  const [crosshairPosition, setCrosshairPosition] = useState(null);

  // Dummy data for candlestick chart
  const getCandlestickData = async () => {
    return [
      { timestamp: 1625097600, open: 150.50, high: 155.75, low: 149.20, close: 154.30 },
      { timestamp: 1625184000, open: 154.40, high: 158.00, low: 153.00, close: 157.60 },
      // Add more data points as needed
    ];
  };

  // Dummy data for RSI chart
  const getRSIData = async () => {
    return [
      { timestamp: 1625097600, rsi: 30 },
      { timestamp: 1625184000, rsi: 32 },
      // Add more data points as needed
    ];
  };

  useEffect(() => {
    const createSeparateChart = (containerRef, seriesType, seriesOptions, dataMapper) => {
      const chart = createChart(containerRef.current, {
        // Chart configuration options
      });

      const series = chart[seriesType](seriesOptions);

      const fetchAndRenderData = async () => {
        const data = seriesType === 'addCandlestickSeries' ? await getCandlestickData() : await getRSIData();
        const formattedData = data.map(dataMapper);
        series.setData(formattedData);
      };

      fetchAndRenderData();

      // Resize observer and other setup...

      return { chart, series };
    };

    const candlestickChart = createSeparateChart(
      candlestickChartRef,
      'addCandlestickSeries',
      {},
      d => ({
        time: d.timestamp,
        open: d.open,
        high: d.high,
        low: d.low,
        close: d.close,
      })
    );

    const rsiChart = createSeparateChart(
      rsiChartRef,
      'addLineSeries',
      { color: 'purple', lineWidth: 1 },
      d => ({
        time: d.timestamp,
        value: d.rsi,
      })
    );

    const synchronizeCrosshair = () => {
      const onMouseMove = (e) => {
        const candlestickChartInstance = candlestickChartRef.current?.chart;
        const rsiChartInstance = rsiChartRef.current?.chart;

        if (!candlestickChartInstance || !rsiChartInstance) return;

        const rect = candlestickChartInstance._element.getBoundingClientRect();
        const clientX = e.clientX || e.touches?.[0]?.clientX; // Use clientX or touch event's clientX
        const clientY = e.clientY || e.touches?.[0]?.clientY; // Use clientY or touch event's clientY

        if (!clientX || !clientY) return; // Check if clientX or clientY are undefined

        const offsetX = clientX - rect.left; // Manually calculate offsetX
        const offsetY = clientY - rect.top; // Manually calculate offsetY

        if (offsetX >= 0 && offsetX <= rect.width && offsetY >= 0 && offsetY <= rect.height) {
          // Mouse is inside candlestick chart
          const time = candlestickChartInstance.timeScale().coordinateToTime(offsetX);
          setCrosshairPosition({ time, chart: 'candlestick' });
          rsiChartInstance.removeSeries('crosshairLine');
        } else {
          // Mouse is inside RSI chart
          const time = rsiChartInstance.timeScale().coordinateToTime(offsetX);
          setCrosshairPosition({ time, chart: 'rsi' });
          candlestickChartInstance.removeSeries('crosshairLine');
        }
      };

      const onMouseLeave = () => {
        setCrosshairPosition(null);
        candlestickChartRef.current?.chart?.removeSeries('crosshairLine');
        rsiChartRef.current?.chart?.removeSeries('crosshairLine');
      };

      candlestickChartRef.current?.addEventListener('mousemove', onMouseMove);
      rsiChartRef.current?.addEventListener('mousemove', onMouseMove);
      candlestickChartRef.current?.addEventListener('mouseleave', onMouseLeave);
      rsiChartRef.current?.addEventListener('mouseleave', onMouseLeave);

      return () => {
        candlestickChartRef.current?.removeEventListener('mousemove', onMouseMove);
        rsiChartRef.current?.removeEventListener('mousemove', onMouseMove);
        candlestickChartRef.current?.removeEventListener('mouseleave', onMouseLeave);
        rsiChartRef.current?.removeEventListener('mouseleave', onMouseLeave);
      };
    };

    synchronizeCrosshair();

    return () => {
      candlestickChart.chart.remove();
      rsiChart.chart.remove();
    };
  }, []);

  useEffect(() => {
    if (!crosshairPosition) return;

    const candlestickChartInstance = candlestickChartRef.current?.chart;
    const rsiChartInstance = rsiChartRef.current?.chart;

    if (!candlestickChartInstance || !rsiChartInstance) return;

    if (crosshairPosition.chart === 'candlestick') {
      const candlestickSeries = candlestickChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      candlestickSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    } else {
      const rsiSeries = rsiChartInstance.addLineSeries({
        color: 'rgba(0, 0, 0, 0.5)',
        lineWidth: 1,
        priceLineVisible: false,
        priceFormat: {
          type: 'custom',
          formatter: () => '',
        },
      });

      rsiSeries.setData([{ time: crosshairPosition.time, value: NaN }, { time: crosshairPosition.time, value: NaN }]);
    }

    return () => {
      candlestickChartInstance.removeSeries('crosshairLine');
      rsiChartInstance.removeSeries('crosshairLine');
    };
  }, [crosshairPosition]);

  return (
    <div>
      <div ref={candlestickChartRef} style={{ width: '100vw', height: '50vh' }} />
      <div ref={rsiChartRef} style={{ width: '100vw', height: '50vh' }} />
    </div>
  );
};

export default ChartComponent;
export default ChartComponent;
const onMouseMove = (e) => {
  const candlestickChartInstance = candlestickChartRef.current?.chart;
  const rsiChartInstance = rsiChartRef.current?.chart;

  if (!candlestickChartInstance || !rsiChartInstance) return;

  const rect = candlestickChartInstance._element.getBoundingClientRect();
  const offsetX = e.clientX - rect.left; // Manually calculate offsetX
  const offsetY = e.clientY - rect.top; // Manually calculate offsetY

  if (offsetX >= 0 && offsetX <= rect.width && offsetY >= 0 && offsetY <= rect.height) {
    // Mouse is inside candlestick chart
    const time = candlestickChartInstance.timeScale().coordinateToTime(offsetX);
    setCrosshairPosition({ time, chart: 'candlestick' });
    rsiChartInstance.removeSeries('crosshairLine');
  } else {
    // Mouse is inside RSI chart
    const time = rsiChartInstance.timeScale().coordinateToTime(offsetX);
    setCrosshairPosition({ time, chart: 'rsi' });
    candlestickChartInstance.removeSeries('crosshairLine');
  }
};
