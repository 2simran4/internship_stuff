import React, { useEffect, useRef } from 'react';
import { createChart } from 'lightweight-charts';

const ChartComponent = () => {
  const candlestickChartRef = useRef();
  const rsiChartRef = useRef();

  const getCandlestickData = () => [
    { time: '2023-06-01', open: 100, high: 110, low: 90, close: 105 },
    { time: '2023-06-02', open: 105, high: 115, low: 95, close: 110 },
    { time: '2023-06-03', open: 110, high: 120, low: 100, close: 115 },
    { time: '2023-06-04', open: 115, high: 125, low: 105, close: 120 },
    { time: '2023-06-05', open: 120, high: 130, low: 110, close: 125 },
    // Add more data points as needed
  ];

  const getRSIData = () => [
    { time: '2023-06-01', value: 30 },
    { time: '2023-06-02', value: 35 },
    { time: '2023-06-03', value: 40 },
    { time: '2023-06-04', value: 45 },
    { time: '2023-06-05', value: 50 },
    // Add more data points as needed
  ];

  useEffect(() => {
    const candlestickChart = createChart(candlestickChartRef.current, {
      width: candlestickChartRef.current.clientWidth,
      height: 300,
      layout: {
        backgroundColor: '#ffffff',
        textColor: '#000000',
      },
      timeScale: {
        timeVisible: true,
        secondsVisible: false,
      },
    });

    const rsiChart = createChart(rsiChartRef.current, {
      width: rsiChartRef.current.clientWidth,
      height: 200,
      layout: {
        backgroundColor: '#ffffff',
        textColor: '#000000',
      },
      timeScale: {
        timeVisible: true,
        secondsVisible: false,
      },
    });

    const candlestickSeries = candlestickChart.addCandlestickSeries();
    candlestickSeries.setData(getCandlestickData());

    const rsiSeries = rsiChart.addLineSeries({ color: 'purple' });
    rsiSeries.setData(getRSIData());

    const synchronizeCrosshair = (event) => {
      const crosshairSource = event.seriesData;
      if (crosshairSource) {
        const time = event.time;
        const candlestickChartSource = candlestickChart.timeScale();
        const rsiChartSource = rsiChart.timeScale();
        candlestickChartSource.setVisibleRange({ from: time - 10, to: time + 10 });
        rsiChartSource.setVisibleRange({ from: time - 10, to: time + 10 });
      }
    };

    candlestickChart.subscribeCrosshairMove(synchronizeCrosshair);
    rsiChart.subscribeCrosshairMove(synchronizeCrosshair);

    const resizeObserver = new ResizeObserver((entries) => {
      for (let entry of entries) {
        if (entry.target === candlestickChartRef.current) {
          candlestickChart.resize(entry.contentRect.width, entry.contentRect.height);
        } else if (entry.target === rsiChartRef.current) {
          rsiChart.resize(entry.contentRect.width, entry.contentRect.height);
        }
      }
    });

    resizeObserver.observe(candlestickChartRef.current);
    resizeObserver.observe(rsiChartRef.current);

    return () => {
      resizeObserver.disconnect();
    };
  }, []);

  return (
    <div>
      <div ref={candlestickChartRef} style={{ width: '100%', height: '300px' }}></div>
      <div ref={rsiChartRef} style={{ width: '100%', height: '200px' }}></div>
    </div>
  );
};

export default ChartComponent;
