import React, { useState, useEffect } from 'react';

const MyComponent = () => {
  const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight,
  });

  const [sizes, setSizes] = useState({
    left: { width: (3 * window.innerWidth) / 4 - 10, height: window.innerHeight },
    right: { width: window.innerWidth / 4 - 5, height: window.innerHeight },
    leftTop: { width: (3 * window.innerWidth) / 4 - 10, height: (2 * window.innerHeight) / 5 },
    leftBottom1: { width: (3 * window.innerWidth) / 4 - 10, height: window.innerHeight / 5 },
    leftBottom2: { width: (3 * window.innerWidth) / 4 - 10, height: window.innerHeight / 5 },
    leftBottom3: { width: (3 * window.innerWidth) / 4 - 10, height: window.innerHeight / 5 },
    rightTop: { width: window.innerWidth / 4 - 5, height: window.innerHeight / 2 },
    rightBottom: { width: window.innerWidth / 4 - 5, height: window.innerHeight / 2 },
  });

  const [isMobile, setIsMobile] = useState(window.innerWidth < 1000);
  const [showWatchlist, setShowWatchlist] = useState(false); // Assuming initial value

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    };

    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  useEffect(() => {
    if (windowSize.width < 1000) {
      setIsMobile(true);
      if (!showWatchlist) {
        setSizes({
          left: { width: windowSize.width, height: windowSize.height },
          right: { width: 0, height: windowSize.height },
          leftTop: { width: (3 * windowSize.width) / 4 - 10, height: (2 * windowSize.height) / 5 },
          leftBottom1: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height / 5 },
          leftBottom2: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height / 5 },
          leftBottom3: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height / 5 },
          rightTop: { width: windowSize.width / 4 - 5, height: windowSize.height / 2 },
          rightBottom: { width: windowSize.width / 4 - 5, height: windowSize.height / 2 },
        });
      } else {
        setSizes({
          left: { width: 0, height: windowSize.height },
          right: { width: windowSize.width, height: windowSize.height },
          leftTop: { width: (3 * windowSize.width) / 4 - 10, height: (2 * windowSize.height) / 5 },
          leftBottom1: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height / 5 },
          leftBottom2: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height / 5 },
          leftBottom3: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height / 5 },
          rightTop: { width: windowSize.width / 4 - 5, height: windowSize.height / 2 },
          rightBottom: { width: windowSize.width / 4 - 5, height: windowSize.height / 2 },
        });
      }
    } else {
      setIsMobile(false);
      setSizes({
        left: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height },
        right: { width: windowSize.width / 4 - 5, height: windowSize.height },
        leftTop: { width: (3 * windowSize.width) / 4 - 10, height: (2 * windowSize.height) / 5 },
        leftBottom1: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height / 5 },
        leftBottom2: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height / 5 },
        leftBottom3: { width: (3 * windowSize.width) / 4 - 10, height: windowSize.height / 5 },
        rightTop: { width: windowSize.width / 4 - 5, height: windowSize.height / 2 },
        rightBottom: { width: windowSize.width / 4 - 5, height: windowSize.height / 2 },
      });
    }
  }, [windowSize, showWatchlist]);

  return (
    <div>
      {/* Your component JSX goes here, utilizing the `sizes` state for styling */}
    </div>
  );
};

export default MyComponent;
