import React, { useState, useRef, useEffect } from 'react';

const SingleSelectDropdown = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [selectedOption, setSelectedOption] = useState(null);
    const [strategy, setStrategy] = useState(null); // Add state for strategy
    const dropdownRef = useRef(null);

    const toggleDropdown = () => {
        setIsOpen(!isOpen);
    };

    const handleClickOutside = (event) => {
        if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
            setIsOpen(false);
        }
    };

    const handleFocusOutside = (event) => {
        if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
            setIsOpen(false);
        }
    };

    useEffect(() => {
        document.addEventListener('mousedown', handleClickOutside);
        document.addEventListener('focusin', handleFocusOutside);

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
            document.removeEventListener('focusin', handleFocusOutside);
        };
    }, []);

    const handleOptionSelect = (option) => {
        setSelectedOption(option);
        setIsOpen(false);
        setStrategy(option); // Set the strategy based on the selected option
        console.log(`Selected option: ${option}, Strategy set to: ${option}`);
    };

    return (
        <div className="relative" ref={dropdownRef}>
            <div className="relative inline-block p-3">
                <div
                    className="border border-gray-300 rounded-md p-2 cursor-pointer flex items-center justify-between"
                    onClick={toggleDropdown}
                >
                    <span className="text-sm font-medium text-gray-700">
                        {selectedOption || 'Select Option'}
                    </span>
                    <span className={`arrow ${isOpen ? 'open' : ''}`}>{isOpen ? '▲' : '▼'}</span>
                </div>
            </div>
            {isOpen && (
                <div
                    className="absolute z-10 w-full border border-gray-300 bg-white rounded-md shadow-lg"
                    style={{ top: 'calc(100% + 5px)', maxHeight: '300px', overflowY: 'auto' }}
                >
                    <div className="flex flex-col items-start p-2">
                        {['Strategy 1', 'Strategy 2', 'Strategy 3'].map((option, index) => (
                            <button
                                key={index}
                                className="block w-full text-left p-2 hover:bg-gray-100"
                                onClick={() => handleOptionSelect(option)}
                            >
                                {option}
                            </button>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
};

export default SingleSelectDropdown;
