import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import ButtonComponentWithAction from './ButtonComponentWithAction'; // Adjust the path as necessary

describe('ButtonComponentWithAction', () => {
    test('updates text and triggers action on button click', () => {
        // Create a mock function using jest.fn()
        const mockAction = jest.fn();
        
        // Render the component with the mock function passed as a prop
        render(<ButtonComponentWithAction onAction={mockAction} />);
        
        // Check initial text
        expect(screen.getByText('Initial Text')).toBeInTheDocument();
        
        // Simulate button click
        const button = screen.getByText('Click Me');
        fireEvent.click(button);
        
        // Check updated text
        expect(screen.getByText('Button Clicked!')).toBeInTheDocument();
        
        // Check if the mock function was called
        expect(mockAction).toHaveBeenCalled();
    });
});


import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import SearchBar from './SearchBar'; // Adjust the path as necessary

// Describe block defines a test suite
describe('SearchBar', () => {

    // Individual test cases
    test('renders SearchBar component', () => {
        render(<SearchBar />);
        const inputElement = screen.getByPlaceholderText(/search.../i);
        expect(inputElement).toBeInTheDocument();
    });

    test('displays dropdown with filtered items on input change', async () => {
        render(<SearchBar />);
        const inputElement = screen.getByPlaceholderText(/search.../i);
        
        // Simulate user typing in the input
        fireEvent.change(inputElement, { target: { value: 'Item' } });
        
        // Check if the dropdown is displayed with filtered items
        await waitFor(() => {
            expect(screen.getByText(/Item 1/i)).toBeInTheDocument();
            expect(screen.getByText(/Item 2/i)).toBeInTheDocument();
            expect(screen.getByText(/Item 3/i)).toBeInTheDocument();
        });
    });

    test('hides dropdown when clicking outside', async () => {
        render(<SearchBar />);
        const inputElement = screen.getByPlaceholderText(/search.../i);
        
        // Simulate user typing in the input
        fireEvent.change(inputElement, { target: { value: 'Item' } });
        
        // Check if the dropdown is displayed with filtered items
        await waitFor(() => {
            expect(screen.getByText(/Item 1/i)).toBeInTheDocument();
            expect(screen.getByText(/Item 2/i)).toBeInTheDocument();
            expect(screen.getByText(/Item 3/i)).toBeInTheDocument();
        });
        
        // Simulate clicking outside
        fireEvent.mouseDown(document);
        
        // Check if the dropdown is hidden
        await waitFor(() => {
            expect(screen.queryByText(/Item 1/i)).not.toBeInTheDocument();
        });
    });

    test('displays no results found when no items match', async () => {
        render(<SearchBar />);
        const inputElement = screen.getByPlaceholderText(/search.../i);
        
        // Simulate user typing in the input
        fireEvent.change(inputElement, { target: { value: 'NoMatch' } });
        
        // Check if the dropdown displays no results found
        await waitFor(() => {
            expect(screen.getByText(/No results found/i)).toBeInTheDocument();
        });
    });
});

import React, { useState } from 'react';
import Select from 'react-select';

const MultiSelectDropdown = ({selectedOptions, setSelectedOptions}) => {

    const options = [
        { value: 'item1', label: 'Item 1' },
        { value: 'item2', label: 'Item 2' },
        { value: 'item3', label: 'Item 3' },
    ];

    const handleChange = (selected) => {
        setSelectedOptions(selected);
    };

    return (
        <Select
            isMulti
            value={selectedOptions}
            onChange={handleChange}
            options={options}
            placeholder="Select items..."
        />
    );
};

export default MultiSelectDropdown;

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import MultiSelectDropdown from './MultiSelectDropdown'; // Adjust the path as necessary
import userEvent from '@testing-library/user-event';

describe('MultiSelectDropdown', () => {
    test('renders MultiSelectDropdown component', () => {
        const selectedOptions = [];
        const setSelectedOptions = jest.fn();

        render(<MultiSelectDropdown selectedOptions={selectedOptions} setSelectedOptions={setSelectedOptions} />);
        expect(screen.getByText('Select items...')).toBeInTheDocument();
    });

    test('selects multiple options', async () => {
        const selectedOptions = [];
        const setSelectedOptions = jest.fn();

        render(<MultiSelectDropdown selectedOptions={selectedOptions} setSelectedOptions={setSelectedOptions} />);
        
        const placeholderText = screen.getByText('Select items...');
        expect(placeholderText).toBeInTheDocument();

        // Open the dropdown
        fireEvent.mouseDown(placeholderText);

        // Select the first option
        const firstOption = screen.getByText('Item 1');
        userEvent.click(firstOption);

        // Verify setSelectedOptions was called with the selected option
        expect(setSelectedOptions).toHaveBeenCalledWith([{ value: 'item1', label: 'Item 1' }]);

        // Open the dropdown again
        fireEvent.mouseDown(placeholderText);

        // Select the second option
        const secondOption = screen.getByText('Item 2');
        userEvent.click(secondOption);

        // Verify setSelectedOptions was called with both selected options
        expect(setSelectedOptions).toHaveBeenCalledWith([
            { value: 'item1', label: 'Item 1' },
            { value: 'item2', label: 'Item 2' }
        ]);
    });

    test('deselects an option', async () => {
        const selectedOptions = [{ value: 'item1', label: 'Item 1' }];
        const setSelectedOptions = jest.fn();

        render(<MultiSelectDropdown selectedOptions={selectedOptions} setSelectedOptions={setSelectedOptions} />);
        
        const selectedItem = screen.getByText('Item 1');
        expect(selectedItem).toBeInTheDocument();

        // Deselect the first option
        const removeFirstOption = selectedItem.closest('.react-select__multi-value__remove');
        userEvent.click(removeFirstOption);

        // Verify setSelectedOptions was called with an empty array
        expect(setSelectedOptions).toHaveBeenCalledWith([]);
    });
});

