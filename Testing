import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import ButtonComponentWithAction from './ButtonComponentWithAction'; // Adjust the path as necessary

describe('ButtonComponentWithAction', () => {
    test('updates text and triggers action on button click', () => {
        // Create a mock function using jest.fn()
        const mockAction = jest.fn();
        
        // Render the component with the mock function passed as a prop
        render(<ButtonComponentWithAction onAction={mockAction} />);
        
        // Check initial text
        expect(screen.getByText('Initial Text')).toBeInTheDocument();
        
        // Simulate button click
        const button = screen.getByText('Click Me');
        fireEvent.click(button);
        
        // Check updated text
        expect(screen.getByText('Button Clicked!')).toBeInTheDocument();
        
        // Check if the mock function was called
        expect(mockAction).toHaveBeenCalled();
    });
});


import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import SearchBar from './SearchBar'; // Adjust the path as necessary

// Describe block defines a test suite
describe('SearchBar', () => {

    // Individual test cases
    test('renders SearchBar component', () => {
        render(<SearchBar />);
        const inputElement = screen.getByPlaceholderText(/search.../i);
        expect(inputElement).toBeInTheDocument();
    });

    test('displays dropdown with filtered items on input change', async () => {
        render(<SearchBar />);
        const inputElement = screen.getByPlaceholderText(/search.../i);
        
        // Simulate user typing in the input
        fireEvent.change(inputElement, { target: { value: 'Item' } });
        
        // Check if the dropdown is displayed with filtered items
        await waitFor(() => {
            expect(screen.getByText(/Item 1/i)).toBeInTheDocument();
            expect(screen.getByText(/Item 2/i)).toBeInTheDocument();
            expect(screen.getByText(/Item 3/i)).toBeInTheDocument();
        });
    });

    test('hides dropdown when clicking outside', async () => {
        render(<SearchBar />);
        const inputElement = screen.getByPlaceholderText(/search.../i);
        
        // Simulate user typing in the input
        fireEvent.change(inputElement, { target: { value: 'Item' } });
        
        // Check if the dropdown is displayed with filtered items
        await waitFor(() => {
            expect(screen.getByText(/Item 1/i)).toBeInTheDocument();
            expect(screen.getByText(/Item 2/i)).toBeInTheDocument();
            expect(screen.getByText(/Item 3/i)).toBeInTheDocument();
        });
        
        // Simulate clicking outside
        fireEvent.mouseDown(document);
        
        // Check if the dropdown is hidden
        await waitFor(() => {
            expect(screen.queryByText(/Item 1/i)).not.toBeInTheDocument();
        });
    });

    test('displays no results found when no items match', async () => {
        render(<SearchBar />);
        const inputElement = screen.getByPlaceholderText(/search.../i);
        
        // Simulate user typing in the input
        fireEvent.change(inputElement, { target: { value: 'NoMatch' } });
        
        // Check if the dropdown displays no results found
        await waitFor(() => {
            expect(screen.getByText(/No results found/i)).toBeInTheDocument();
        });
    });
});
