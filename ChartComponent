import React, { useState } from 'react';

// CSS for basic styling
const styles = {
  container: {
    width: '450px',
    padding: '15px',
    border: '1px solid #d9d9d9',
    borderRadius: '4px',
    fontFamily: 'Arial, sans-serif'
  },
  label: {
    fontSize: '18px',
    marginBottom: '10px',
    display: 'inline-block'
  },
  multiSelect: {
    display: 'flex',
    flexDirection: 'column'
  },
  option: {
    display: 'flex',
    alignItems: 'center',
    marginBottom: '5px'
  },
  checkbox: {
    marginRight: '10px'
  }
};

const SelectIndicator = ({ options, selectedIndicators, handleChange }) => {
  return (
    <div style={styles.multiSelect}>
      {options.map((option) => (
        <div key={option.value} style={styles.option}>
          <input
            type="checkbox"
            id={option.value}
            value={option.value}
            checked={selectedIndicators.includes(option.value)}
            onChange={(e) => handleChange(e.target.value)}
            style={styles.checkbox}
          />
          <label htmlFor={option.value}>{option.label}</label>
        </div>
      ))}
    </div>
  );
};

const Indicators = () => {
  const [selectedIndicators, setSelectedIndicators] = useState([]);

  const options = [
    { value: 'rsi', label: 'RSI' },
    { value: 'sma', label: 'SMA' },
    { value: 'ema_13', label: 'EMA 13' },
    { value: 'ema_20', label: 'EMA 20' },
    { value: 'vwap', label: 'VWAP' },
    { value: 'bb', label: 'Bollinger Bands' }
  ];

  const handleChange = (value) => {
    setSelectedIndicators((prevSelected) =>
      prevSelected.includes(value)
        ? prevSelected.filter((item) => item !== value)
        : [...prevSelected, value]
    );
  };

  return (
    <div style={styles.container}>
      <label htmlFor="indicator-select" style={styles.label}>
        Choose Indicators
      </label>
      <SelectIndicator
        options={options}
        selectedIndicators={selectedIndicators}
        handleChange={handleChange}
      />
    </div>
  );
};

export default Indicators;
