import React, { useEffect, useRef, useState } from 'react';
import { createChart, LineStyle } from 'lightweight-charts';

const HistogramChart = ({
  selectedIndicators,
  data,
  data1,
  vwapdata,
  emas,
  ema13,
  ema26,
  markers,
  stockname
}) => {
  const chartContainerRef = useRef(null);
  const tooltipRef = useRef(null);
  const chartInstanceRef = useRef(null);
  const candleStickSeriesRef = useRef(null);
  const vwapLineRef = useRef(null);
  const ema5LineRef = useRef(null);
  const ema13LineRef = useRef(null);
  const ema26LineRef = useRef(null);
  const histogramSeriesRef = useRef(null);

  const [candlePrice, setCandlePrice] = useState(null);
  const [volume, setVolume] = useState(null);
  const [currentTime, setCurrentTime] = useState(null);
  const [chartWidth, setChartWidth] = useState(0);
  const [chartHeight, setChartHeight] = useState(0);

  // Function to initialize the chart
  const initializeChart = () => {
    const chart = createChart(chartContainerRef.current, {
      width: chartWidth,
      height: chartHeight,
    });

    chart.priceScale('right').applyOptions({
      borderColor: '#716490',
      visible: true,
      autoScale: false,
      minimumWidth: 80,
    });

    chart.priceScale('left').applyOptions({
      borderColor: '#716490',
      visible: true,
      autoScale: false,
    });

    chart.applyOptions({
      layout: {
        backgroundColor: '#ffffff',
        textColor: '#000',
      },
      grid: {
        vertLines: {
          color: '#eee',
        },
        horzLines: {
          color: '#eee',
        },
      },
      leftPriceScale: {
        scaleMargins: {
          top: 0.9,
          bottom: 0,
        },
        width: chartWidth * 0.98,
        height: chartHeight,
        crosshair: {
          vertLine: {
            width: 5,
            style: LineStyle.Solid,
            color: '#C3BCDB44',
            labelBackgroundColor: '#987DFF',
          },
        },
      },
      timeScale: {
        borderColor: '#716490',
        rightOffset: 5,
        barSpacing: 10,
        fixLeftEdge: true,
        timeVisible: true,
      },
    });

    const candleStickSeries = chart.addCandlestickSeries({
      wickUpColor: 'green',
      upColor: 'green',
      wickDownColor: 'red',
      downColor: 'red',
    });

    const vwapLine = chart.addLineSeries({
      color: 'rgba(0, 0, 200, 1)',
      lineWidth: 0.9,
    });

    const ema5Line = chart.addLineSeries({
      color: 'rgba(100, 100, 200, 1)',
      lineWidth: 0.6,
    });

    const ema13Line = chart.addLineSeries({
      color: 'rgba(100, 100, 200, 1)',
      lineWidth: 0.6,
    });

    const ema26Line = chart.addLineSeries({
      color: 'rgba(100, 100, 200, 1)',
      lineWidth: 0.6,
    });

    const histogramSeries = chart.addHistogramSeries({
      color: 'blue',
      priceFormat: {
        type: 'volume',
      },
      priceScaleId: 'left',
      scaleMargins: {
        top: 0.2,
        bottom: 0,
      },
    });

    chartInstanceRef.current = chart;
    candleStickSeriesRef.current = candleStickSeries;
    vwapLineRef.current = vwapLine;
    ema5LineRef.current = ema5Line;
    ema13LineRef.current = ema13Line;
    ema26LineRef.current = ema26Line;
    histogramSeriesRef.current = histogramSeries;
  };

  useEffect(() => {
    initializeChart();

    // Clean up chart instance when component unmounts
    return () => {
      if (chartInstanceRef.current) {
        chartInstanceRef.current.remove();
      }
    };
  }, []);

  useEffect(() => {
    if (chartInstanceRef.current && data && data1 && markers) {
      candleStickSeriesRef.current.setData(data1);
      candleStickSeriesRef.current.setMarkers(markers);
    }
  }, [data1, markers]);

  useEffect(() => {
    if (chartInstanceRef.current && selectedIndicators.includes('vwap')) {
      vwapLineRef.current.setData(vwapdata);
    }
  }, [selectedIndicators, vwapdata]);

  useEffect(() => {
    if (chartInstanceRef.current && selectedIndicators.includes('ema_5')) {
      ema5LineRef.current.setData(emas);
    }
  }, [selectedIndicators, emas]);

  useEffect(() => {
    if (chartInstanceRef.current && selectedIndicators.includes('ema_13')) {
      ema13LineRef.current.setData(ema13);
    }
  }, [selectedIndicators, ema13]);

  useEffect(() => {
    if (chartInstanceRef.current && selectedIndicators.includes('ema_26')) {
      ema26LineRef.current.setData(ema26);
    }
  }, [selectedIndicators, ema26]);

  useEffect(() => {
    if (chartInstanceRef.current) {
      const chart = chartInstanceRef.current;

      const crosshairMoveHandler = param => {
        if (param.time) {
          const data = param.seriesData.get(candleStickSeriesRef.current);
          const volumeData = param.seriesData.get(histogramSeriesRef.current);
          setVolume(volumeData);
          setCandlePrice(data);
          setCurrentTime(param.time);
          const coordinate = histogramSeriesRef.current.priceToCoordinate(volumeData.value);
          const shiftedCoordinate = param.point.x;
          tooltipRef.current.style.left = shiftedCoordinate + 'px';
          tooltipRef.current.style.top = coordinate + 'px';
        }
      };

      chart.subscribeCrosshairMove(crosshairMoveHandler);

      return () => {
        chart.unsubscribeCrosshairMove(crosshairMoveHandler);
      };
    }
  }, []);

  useEffect(() => {
    if (histogramSeriesRef.current && data) {
      histogramSeriesRef.current.setData(data);
    }
  }, [data]);

  const updateChartSize = () => {
    if (chartContainerRef.current) {
      setChartWidth(chartContainerRef.current.clientWidth);
      setChartHeight(chartContainerRef.current.clientHeight);
    }
  };

  useEffect(() => {
    const resizeObserver = new ResizeObserver(() => {
      updateChartSize();
    });

    if (chartContainerRef.current) {
      resizeObserver.observe(chartContainerRef.current);
    }

    return () => {
      if (chartContainerRef.current) {
        resizeObserver.unobserve(chartContainerRef.current);
      }
    };
  }, []);

  return (
    <div className="w-full h-full" ref={chartContainerRef} style={{ position: 'relative' }}>
      <div ref={tooltipRef}></div>
      <div
        style={{
          fontFamily: 'Times New Roman',
          paddingLeft: 10,
          paddingRight: 10,
          position: 'absolute',
          top: 5,
          left: 80,
          zIndex: 100,
          color: 'black',
          border: '1.5px solid',
          borderBlockColor: 'black',
        }}
      >
        <div style={{ display: 'flex' }}>
          <div style={{ marginRight: 15 }}>{stockname}</div>
          <div style={{ marginRight: 10 }}>O: {candlePrice?.open}</div>
          <div style={{ marginRight: 10 }}>H: {candlePrice?.high}</div>
          <div style={{ marginRight: 10 }}>L: {candlePrice?.low}</div>
          <div style={{ marginRight: 10 }}>C: {candlePrice?.close}</div>
          <div style={{ marginRight: 10 }}>Vol: {volume?.value}</div>
        </div>
      </div>
    </div>
  );
};

export default HistogramChart;
