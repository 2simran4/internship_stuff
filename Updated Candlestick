import React, { useEffect, useRef } from 'react';
import { createChart, LineStyle } from 'lightweight-charts';

const HistogramChart = ({ selectedIndicators, candlestickData, histogramData }) => {
  const chartContainerRef = useRef();
  const candleStickSeriesRef = useRef();
  const histogramSeriesRef = useRef();

  useEffect(() => {
    const chart = createChart(chartContainerRef.current, {
      width: chartContainerRef.current.clientWidth,
      height: chartContainerRef.current.clientHeight,
      layout: {
        backgroundColor: '#ffffff',
        textColor: '#000',
      },
      grid: {
        vertLines: {
          color: '#eee',
        },
        horzLines: {
          color: '#eee',
        },
      },
      crosshair: {
        vertLine: {
          width: 5,
          style: LineStyle.Solid,
          color: "#C3BCDB44",
          labelBackgroundColor: '#987DFF',
        }
      },
      timeScale: {
        borderColor: '#716490',
        rightOffset: 5,
        barSpacing: 10,
        fixLeftEdge: true,
        timeVisible: true,
      }
    });

    candleStickSeriesRef.current = chart.addCandlestickSeries({
      wickUpColor: 'green',
      upColor: 'green',
      wickDownColor: 'red',
      downColor: 'red',
    });

    histogramSeriesRef.current = chart.addHistogramSeries({
      color: 'blue',
      priceFormat: {
        type: 'volume',
      },
      priceScaleId: 'left',
      scaleMargins: {
        top: 0.2,
        bottom: 0,
      }
    });

    return () => {
      chart.remove();
    };
  }, []);

  useEffect(() => {
    if (candleStickSeriesRef.current && candlestickData) {
      candleStickSeriesRef.current.update({
        time: candlestickData.time,
        open: candlestickData.open,
        high: candlestickData.high,
        low: candlestickData.low,
        close: candlestickData.close,
      });
    }
  }, [candlestickData]);

  useEffect(() => {
    if (histogramSeriesRef.current && histogramData) {
      histogramSeriesRef.current.setData(histogramData);
    }
  }, [histogramData]);

  return (
    <div className='w-full h-full' ref={chartContainerRef} style={{ position: "relative" }}>
      {/* Additional JSX for tooltip or other UI elements */}
    </div>
  );
};

export default HistogramChart;
