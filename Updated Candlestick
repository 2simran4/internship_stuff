import React, { useEffect, useRef, useState } from 'react';
import { createChart, LineStyle } from 'lightweight-charts';

const HistogramChart = ({ selectedIndicators, data, data1, vwapdata, ema5, ema13, ema26, markers, stockname }) => {
  const chartContainerRef = useRef();
  const tooltipRef = useRef();
  const chartRef = useRef(null);

  const candleStickSeriesRef = useRef(null);
  const vwapLineRef = useRef(null);
  const ema5LineRef = useRef(null);
  const ema13LineRef = useRef(null);
  const ema26LineRef = useRef(null);
  const histogramSeriesRef = useRef(null);

  const [candlePrice, setCandlePrice] = useState(null);
  const [volume, setVolume] = useState(null);
  const [chartWidth, setChartWidth] = useState(0);
  const [chartHeight, setChartHeight] = useState(0);

  const updateChartSize = () => {
    if (chartContainerRef.current) {
      setChartWidth(chartContainerRef.current.clientWidth);
      setChartHeight(chartContainerRef.current.clientHeight);
    }
  };

  useEffect(() => {
    const resizeObserver = new ResizeObserver(() => {
      updateChartSize();
    });

    if (chartContainerRef.current) {
      resizeObserver.observe(chartContainerRef.current);
    }

    return () => {
      if (chartContainerRef.current) {
        resizeObserver.unobserve(chartContainerRef.current);
      }
    };
  }, []);

  useEffect(() => {
    if (!chartRef.current) {
      chartRef.current = createChart(chartContainerRef.current, {
        width: chartWidth,
        height: chartHeight,
        layout: {
          backgroundColor: '#ffffff',
          textColor: '#000',
        },
        grid: {
          vertLines: {
            color: '#eee',
          },
          horzLines: {
            color: '#eee',
          },
        },
        crosshair: {
          vertLine: {
            width: 5,
            style: LineStyle.Solid,
            color: "#C3BCDB44",
            labelBackgroundColor: '#987DFF',
          }
        },
        timeScale: {
          borderColor: '#716490',
          rightOffset: 5,
          barSpacing: 10,
          fixLeftEdge: true,
          timeVisible: true,
        }
      });

      chartRef.current.priceScale("right").applyOptions({
        borderColor: '#716490',
        visible: true,
        autoScale: false,
        minimumWidth: 80,
      });

      chartRef.current.priceScale("left").applyOptions({
        borderColor: '#716490',
        visible: true,
        autoScale: false,
      });

      candleStickSeriesRef.current = chartRef.current.addCandlestickSeries({
        wickUpColor: 'green',
        upColor: 'green',
        wickDownColor: 'red',
        downColor: 'red',
      });

      vwapLineRef.current = chartRef.current.addLineSeries({
        color: 'rgba(0,0,200,1)',
        lineWidth: 0.9,
      });

      ema5LineRef.current = chartRef.current.addLineSeries({
        color: 'rgba(100, 100, 200,1)',
        lineWidth: 0.6,
      });

      ema13LineRef.current = chartRef.current.addLineSeries({
        color: 'rgba(100, 100, 200,1)',
        lineWidth: 0.6,
      });

      ema26LineRef.current = chartRef.current.addLineSeries({
        color: 'rgba(100, 100, 200,1)',
        lineWidth: 0.6,
      });

      histogramSeriesRef.current = chartRef.current.addHistogramSeries({
        color: 'blue',
        priceFormat: {
          type: 'volume',
        },
        priceScaleId: 'left',
        scaleMargins: {
          top: 0.2,
          bottom: 0,
        }
      });

      chartRef.current.subscribeCrosshairMove((param) => {
        if (param.time) {
          const candleData = param.seriesData.get(candleStickSeriesRef.current);
          const volumeData = param.seriesData.get(histogramSeriesRef.current);
          setVolume(volumeData);
          setCandlePrice(candleData);
        }
      });

      candleStickSeriesRef.current.setData(data1);
      histogramSeriesRef.current.setData(data);
      candleStickSeriesRef.current.setMarkers(markers);

      if (selectedIndicators.includes('vwap')) {
        vwapLineRef.current.setData(vwapdata);
      }

      if (selectedIndicators.includes('ema_5')) {
        ema5LineRef.current.setData(ema5);
      }

      if (selectedIndicators.includes('ema_13')) {
        ema13LineRef.current.setData(ema13);
      }

      if (selectedIndicators.includes('ema_26')) {
        ema26LineRef.current.setData(ema26);
      }
    } else {
      chartRef.current.applyOptions({
        width: chartWidth,
        height: chartHeight,
      });
    }
  }, [chartWidth, chartHeight]);

  useEffect(() => {
    if (candleStickSeriesRef.current) {
      candleStickSeriesRef.current.setData(data1);
    }

    if (histogramSeriesRef.current) {
      histogramSeriesRef.current.setData(data);
    }

    if (vwapLineRef.current && selectedIndicators.includes('vwap')) {
      vwapLineRef.current.setData(vwapdata);
    }

    if (ema5LineRef.current && selectedIndicators.includes('ema_5')) {
      ema5LineRef.current.setData(ema5);
    }

    if (ema13LineRef.current && selectedIndicators.includes('ema_13')) {
      ema13LineRef.current.setData(ema13);
    }

    if (ema26LineRef.current && selectedIndicators.includes('ema_26')) {
      ema26LineRef.current.setData(ema26);
    }
  }, [data, data1, vwapdata, ema5, ema13, ema26, selectedIndicators]);

  return (
    <div className='w-full h-full' ref={chartContainerRef} style={{ position: "relative" }}>
      <div ref={tooltipRef}></div>
      <div style={{
        fontFamily: "Times New Roman",
        paddingLeft: 10,
        paddingRight: 10,
        position: "absolute",
        top: 5,
        left: 80,
        zIndex: 100,
        color: "black",
        border: "1.5px solid",
        borderBlockColor: "black",
      }}>
        <div style={{ display: "flex" }}>
          <div style={{ marginRight: 15 }}>{stockname}</div>
          <div style={{ marginRight: 10 }}>O: {candlePrice?.open}</div>
          <div style={{ marginRight: 10 }}>H: {candlePrice?.high}</div>
          <div style={{ marginRight: 10 }}>L: {candlePrice?.low}</div>
          <div style={{ marginRight: 10 }}>C: {candlePrice?.close}</div>
          <div style={{ marginRight: 10 }}>Vol: {volume?.value}</div>
        </div>
      </div>
    </div>
  );
};

export default HistogramChart;
