import React, { useEffect, useRef, useState } from 'react';
import { createChart, LineStyle } from 'lightweight-charts';

const HistogramChart = ({ selectedIndicators, data, data1, vwapdata, ema5, ema13, ema26, markers, stockname }) => {
  const chartContainerRef = useRef();
  const tooltipRef = useRef();

  const candleStickSeriesRef = useRef();
  const vwapLineRef = useRef();
  const ema5LineRef = useRef();
  const ema13LineRef = useRef();
  const ema26LineRef = useRef();
  const histogramSeriesRef = useRef();

  const [candlePrice, setCandlePrice] = useState(null);
  const [volume, setVolume] = useState(null);
  const [currentTime, setCurrentTime] = useState(null);
  const [chartWidth, setChartWidth] = useState(0);
  const [chartHeight, setChartHeight] = useState(0);

  const updateChartSize = () => {
    if (chartContainerRef.current) {
      setChartWidth(chartContainerRef.current.clientWidth);
      setChartHeight(chartContainerRef.current.clientHeight);
    }
  };

  useEffect(() => {
    const resizeObserver = new ResizeObserver(() => {
      updateChartSize();
    });

    if (chartContainerRef.current) {
      resizeObserver.observe(chartContainerRef.current);
    }

    return () => {
      if (chartContainerRef.current) {
        resizeObserver.unobserve(chartContainerRef.current);
      }
    };
  }, []);

  useEffect(() => {
    const chart = createChart(chartContainerRef.current, {
      width: chartWidth * 0.98,
      height: chartHeight,
      layout: {
        backgroundColor: '#ffffff',
        textColor: '#000',
      },
      grid: {
        vertLines: {
          color: '#eee',
        },
        horzLines: {
          color: '#eee',
        },
      },
      crosshair: {
        vertLine: {
          width: 5,
          style: LineStyle.Solid,
          color: "#C3BCDB44",
          labelBackgroundColor: '#987DFF',
        }
      },
      timeScale: {
        borderColor: '#716490',
        rightOffset: 5,
        barSpacing: 10,
        fixLeftEdge: true,
        timeVisible: true,
      }
    });

    chart.priceScale("right").applyOptions({
      borderColor: '#716490',
      visible: true,
      autoScale: false,
      minimumWidth: 80,
    });

    chart.priceScale("left").applyOptions({
      borderColor: '#716490',
      visible: true,
      autoScale: false,
    });

    const candleStickSeries = chart.addCandlestickSeries({
      wickUpColor: 'green',
      upColor: 'green',
      wickDownColor: 'red',
      downColor: 'red',
    });

    const vwap_line = chart.addLineSeries({
      color: 'rgba(0,0,200,1)',
      lineWidth: 0.9,
    });

    const ema5_line = chart.addLineSeries({
      color: 'rgba(100, 100, 200,1)',
      lineWidth: 0.6,
    });

    const ema13_line = chart.addLineSeries({
      color: 'rgba(100, 100, 200,1)',
      lineWidth: 0.6,
    });

    const ema26_line = chart.addLineSeries({
      color: 'rgba(100, 100, 200,1)',
      lineWidth: 0.6,
    });

    const histogramSeries = chart.addHistogramSeries({
      color: 'blue',
      priceFormat: {
        type: 'volume',
      },
      priceScaleId: 'left',
      scaleMargins: {
        top: 0.2,
        bottom: 0,
      }
    });

    candleStickSeriesRef.current = candleStickSeries;
    vwapLineRef.current = vwap_line;
    ema5LineRef.current = ema5_line;
    ema13LineRef.current = ema13_line;
    ema26LineRef.current = ema26_line;
    histogramSeriesRef.current = histogramSeries;

    chart.subscribeCrosshairMove((param) => {
      if (param.time) {
        const data = param.seriesData.get(candleStickSeries);
        const volumeData = param.seriesData.get(histogramSeries);
        setVolume(volumeData);
        setCandlePrice(data);
        setCurrentTime(param.time);

        const coordinate = histogramSeries.priceToCoordinate(histogramSeries.value);
        const shiftedCoordinate = param.point.x;

        tooltipRef.current.style.left = `${shiftedCoordinate}px`;
        tooltipRef.current.style.top = `${coordinate}px`;
      }
    });

    candleStickSeries.setData(data1);
    histogramSeries.setData(data);
    candleStickSeries.setMarkers(markers);

    if (selectedIndicators.includes('vwap')) {
      vwap_line.setData(vwapdata);
    }

    if (selectedIndicators.includes('ema_5')) {
      ema5_line.setData(ema5);
    }

    if (selectedIndicators.includes('ema_13')) {
      ema13_line.setData(ema13);
    }

    if (selectedIndicators.includes('ema_26')) {
      ema26_line.setData(ema26);
    }

    return () => chart.remove();
  }, [chartWidth, chartHeight]);

  useEffect(() => {
    if (candleStickSeriesRef.current) {
      data1.forEach(item => {
        candleStickSeriesRef.current.update(item);
      });
    }
    if (histogramSeriesRef.current) {
      data.forEach(item => {
        histogramSeriesRef.current.update(item);
      });
    }
    if (vwapLineRef.current && selectedIndicators.includes('vwap')) {
      vwapdata.forEach(item => {
        vwapLineRef.current.update(item);
      });
    }
    if (ema5LineRef.current && selectedIndicators.includes('ema_5')) {
      ema5.forEach(item => {
        ema5LineRef.current.update(item);
      });
    }
    if (ema13LineRef.current && selectedIndicators.includes('ema_13')) {
      ema13.forEach(item => {
        ema13LineRef.current.update(item);
      });
    }
    if (ema26LineRef.current && selectedIndicators.includes('ema_26')) {
      ema26.forEach(item => {
        ema26LineRef.current.update(item);
      });
    }
  }, [data, data1, vwapdata, ema5, ema13, ema26, selectedIndicators]);

  return (
    <div className='w-full h-full' ref={chartContainerRef} style={{ position: "relative" }}>
      <div ref={tooltipRef}></div>
      <div style={{
        fontFamily: "Times New Roman",
        paddingLeft: 10,
        paddingRight: 10,
        position: "absolute",
        top: 5,
        left: 80,
        zIndex: 100,
        color: "black",
        border: "1.5px solid",
        borderBlockColor: "black",
      }}>
        <div style={{ display: "flex" }}>
          <div style={{ marginRight: 15 }}>{stockname}</div>
          <div style={{ marginRight: 10 }}>O: {candlePrice?.open}</div>
          <div style={{ marginRight: 10 }}>H: {candlePrice?.high}</div>
          <div style={{ marginRight: 10 }}>L: {candlePrice?.low}</div>
          <div style={{ marginRight: 10 }}>C: {candlePrice?.close}</div>
          <div style={{ marginRight: 10 }}>Vol: {volume?.value}</div>
        </div>
      </div>
    </div>
  );
};

export default HistogramChart;
