import React, { useState } from 'react';

const Indicators = ({ selectedIndicators, setSelectedIndicators }) => {
  const [isOpen, setIsOpen] = useState(false); // State to manage dropdown visibility

  const toggleDropdown = () => {
    setIsOpen(!isOpen); // Toggle dropdown visibility
  };

  const toggleIndicator = (indicator) => {
    const isSelected = selectedIndicators.includes(indicator);
    if (isSelected) {
      setSelectedIndicators(selectedIndicators.filter((item) => item !== indicator));
    } else {
      setSelectedIndicators([...selectedIndicators, indicator]);
    }
  };

  const selectAll = () => {
    setSelectedIndicators(["rsi", "macd", "obv", "ena_5", "ema_13", "ena_26", "wap", "bb"]);
  };

  const clearSelection = () => {
    setSelectedIndicators([]);
  };

  return (
    <div className="relative">
      <div className="relative inline-block">
        <div
          className="border border-gray-300 rounded-md p-2 cursor-pointer flex items-center justify-between"
          onClick={toggleDropdown}
        >
          <span className="text-sm font-medium text-gray-700">
            Choose Indicators
          </span>
          <svg
            className={`ml-2 h-5 w-5 transition-transform transform ${isOpen ? 'rotate-180' : ''}`}
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10 12a.75.75 0 01.53.22l3.25 3a.75.75 0 11-1.06 1.06l-2.47-2.48-2.47 2.48a.75.75 0 11-1.06-1.06l3.25-3a.75.75 0 01.53-.22z"
              clipRule="evenodd"
            />
          </svg>
        </div>
        {isOpen && (
          <div
            className="absolute z-10 mt-2 w-full border border-gray-300 bg-white rounded-md shadow-lg"
            style={{ top: 'calc(100% + 8px)', maxHeight: '200px', overflowY: 'auto' }}
          >
            <div className="flex items-center mb-2">
              <input
                type="checkbox"
                id="select-all"
                className="mr-2 cursor-pointer"
                checked={selectedIndicators.length === 8}
                onChange={selectAll}
              />
              <label
                htmlFor="select-all"
                className="text-sm font-medium text-gray-700 cursor-pointer"
              >
                Select All
              </label>
            </div>
            {["rsi", "macd", "obv", "ena_5", "ema_13", "ena_26", "wap", "bb"].map(
              (indicator) => (
                <div key={indicator} className="flex items-center mb-1">
                  <input
                    type="checkbox"
                    id={indicator}
                    className="mr-2 cursor-pointer"
                    checked={selectedIndicators.includes(indicator)}
                    onChange={() => toggleIndicator(indicator)}
                  />
                  <label
                    htmlFor={indicator}
                    className="text-sm font-medium text-gray-700 cursor-pointer"
                  >
                    {indicator.toUpperCase()}
                  </label>
                </div>
              )
            )}
            <button
              className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-md"
              onClick={clearSelection}
            >
              Clear Selection
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Indicators;
